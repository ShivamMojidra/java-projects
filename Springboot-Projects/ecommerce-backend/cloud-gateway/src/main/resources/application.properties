spring.application.name=cloud-gateway

spring.main.web-application-type=reactive

server.port=9090

#Product Service
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service/
spring.cloud.gateway.routes[0].predicates[0]=Path=/v1/product/**
#spring.cloud.gateway.routes[0].filters[0].name=circuit-breaker
#spring.cloud.gateway.routes[0].filters[0].args.name=product-service
#spring.cloud.gateway.routes[0].filters[0].args.fallbackuri=forward:/fallback/productServiceFallBack

#Order Service
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service/
spring.cloud.gateway.routes[1].predicates[0]=Path=/v1/order/**
#spring.cloud.gateway.routes[1].filters[0].name=circuit-breaker
#spring.cloud.gateway.routes[1].filters[0].args.name=order-service
#spring.cloud.gateway.routes[1].filters[0].args.fallbackuri=forward:/fallback/orderServiceFallBack

#Payment Service
spring.cloud.gateway.routes[2].id=payment-service
spring.cloud.gateway.routes[2].uri=lb://payment-service/
spring.cloud.gateway.routes[2].predicates[0]=Path=/v1/payment/**
#spring.cloud.gateway.routes[2].filters[0].name=circuit-breaker
#spring.cloud.gateway.routes[2].filters[0].args.name=payment-service
#spring.cloud.gateway.routes[2].filters[0].args.fallbackuri=forward:/fallback/paymentServiceFallBack

#eureka configurations
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.default-zone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true

#KeyCloak Configurations
#spring.security.oauth2.client.provider.external.issuer-uri=http://localhost:8080/realms/SpringBootKeycloak
#
#spring.security.oauth2.client.registration.external.provider=external
#spring.security.oauth2.client.registration.external.client-name=Microservices Spring Security
#spring.security.oauth2.client.registration.external.client-id=Microservices Spring Security
#spring.security.oauth2.client.registration.external.client-secret=ITaAN34Mv7jXKMSvtSboLkGHtp1b8AHx
#spring.security.oauth2.client.registration.external.scope=openid,offline_access,profile
#spring.security.oauth2.client.registration.external.authorization-grant-type=authorization_code